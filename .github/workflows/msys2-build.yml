name: MSYS2 build (MinGW-w64)

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/macos-build.yml'
      - '.github/workflows/linux-build.yml'
      - '.github/workflows/windows-build.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        msystem: [mingw64]
        os: [windows-latest]
        arch: [x86_64]
        mode: [debug, releasedbg]

    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Get current date as package key
      id: cache_key
      shell: bash
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
    
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup MSYS2
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        install: base-devel git unzip p7zip mingw-w64-${{ matrix.arch }}-toolchain mingw-w64-${{ matrix.arch }}-xmake
        update: true
    
    # Force xmake to a specific folder
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: branch@dev
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}
    
    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update
    
    # Fetch xmake dephash
    - name: Retrieve dependencies hash
      id: dep_hash
      run: echo " hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
    
    # Cache xmake dependencies
    - name: Restore cached xmake dependencies
      id: restore_depcache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: MinGW-${{ matrix.arch }}-${{ matrix.mode }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}
    
    # Setup compilation mode and install dependencies
    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.arch }} --mode=${{ matrix.mode }} --ccache=n --yes

    # Save dependencies
    - name: Save cached xmake dependencies
      if: ${{ !steps.restore_depcache.outputs.cache-hit }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: ${{ steps.restore_depcache.outputs.cache-primary-key }}
    
    # Build the project
    - name: Build BasalteLang
      run: xmake --yes
    
    # Install the files
    - name: Install BasalteLang
      if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' }}
      run: xmake install -vo package
    
    - name: Set PACKAGE_NAME variable
      if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' }}
      run: echo "PACKAGE_NAME=${{matrix.msystem}}_${{ matrix.arch }}_${{ matrix.mode }}.zip" >> $GITHUB_ENV
      shell: bash
    
    - name: Archive result
      uses: ihiroky/archive-action@v1
      if:  ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' }}
      with:
        root_dir: package
        file_path: ${{ env.PACKAGE_NAME }}
        verbose: true
    
    # Nightly tags
    - name: Upload binaries to release (main)
      uses: svenstaro/upload-release-action@v2
      if:  ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.PACKAGE_NAME }}
        asset_name: ${{ env.PACKAGE_NAME }}
        tag: "0.0.0-nighly"
        overwrite: true